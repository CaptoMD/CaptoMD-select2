{"version":3,"sources":["select2.js"],"names":[],"mappings":"AAAA;;AAAA,QAAQ,OAAO,cAAc,IAC1B,MAAM,iBAAiB,IACvB,UAAU,wBAAa,UAAC,QAAW;;;EAGlC,IAAM,oBAAoB;;;EAG1B,SAAS,aAAa,SAAS,OAAO;IACpC,IAAM,QAAQ,QAAQ,MAAM;IAC5B,IAAI,CAAC,OAAO;MACV,MAAM,IAAI,MAAM;;;IAGlB,IAAM,YAAY,OAAO,MAAM,MAAM,MAAM;IAC3C,IAAM,WAAW,OAAO,MAAM;IAC9B,IAAM,YAAY,MAAM,MAAM,MAAM;IACpC,IAAM,UAAU,OAAO,MAAM,KAAK,MAAM,KAAK;IAC7C,IAAM,UAAU,MAAM;;IAEtB,IAAM,SAAS,SAAS;IACxB,IAAM,OAAO,CAAC,QAAQ,SAAS,UAAU,OAAO,KAAK,UAAU,WAAW;;IAE1E,OAAO,KAAK,IAAI,UAAC,KAAQ;MACvB,IAAM,OAAO,QAAQ,SAAS,UAAU,OAAO,OAAO;MACtD,IAAM,SAAS;MACf,IAAI,SAAS;QACX,OAAO,WAAW,QAAQ,SAAS,UAAU,MAAM,KAAK;;MAE1D,IAAI,WAAW;QACb,OAAO,aAAa,QAAQ,SAAS,UAAU,OAAO,KAAK;;;MAG7D,IAAM,KAAK,QAAQ,OAAO;MAC1B,IAAM,OAAO,UAAU,OAAO,WAAW;MACzC,OAAO,EAAE,IAAA,IAAI,MAAA;;;;EAIjB,OAAO;IACL,SAAS;IACT,UAAU;IACV,UAAU;IACV,SAAS;IACT,MALK,SAAA,KAKA,OAAO,SAAS,OAAO,YAAY;MACtC,IAAM,SAAS;MACf,IAAI,MAAM,kBAAkB;QAC1B,OAAO,OAAO,aAAa,MAAM,kBAAkB;;;MAGrD,IAAM,UAAU,QAAQ,QAAQ;;MAEhC,WAAW,UAAU,SAAS,iBAAiB;QAC7C,IAAI,QAAQ,UAAU,KAAK,YAAY;UACrC,QAAQ,IAAI,KAAK,YAAY,QAAQ;;;;;IAtDjD","file":"angular-select2.js","sourcesContent":["angular.module('rt.select2', [])\n  .value('select2Config', {})\n  .directive('ngSelect2', ($parse) => {\n    /* eslint-disable max-len */\n    // ----------------------- 0000111110000000000022220000000000000000000000333300000000000000444444444444444000000000555555555555555000000066666666666666600000000000000007777000000000000000000088888\n    const NG_OPTIONS_REGEXP = /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/;\n    /* eslint-enable max-len */\n\n    function parseOptions(options, scope) {\n      const match = options.match(NG_OPTIONS_REGEXP);\n      if (!match) {\n        throw new Error('Invalid ng-select2-options encountered!');\n      }\n\n      const displayFn = $parse(match[2] || match[1]);\n      const valuesFn = $parse(match[7]);\n      const valueName = match[4] || match[6];\n      const valueFn = $parse(match[2] ? match[1] : valueName);\n      const keyName = match[5];\n\n      const values = valuesFn(scope);\n      const keys = (angular.isObject(values) ? Object.keys(values) : values) || [];\n\n      return keys.map((key) => {\n        const data = angular.isObject(values) ? values[key] : key;\n        const locals = {};\n        if (keyName) {\n          locals[keyName] = angular.isObject(values) ? key : data[keyName];\n        }\n        if (valueName) {\n          locals[valueName] = angular.isObject(values) ? data : data[valueName];\n        }\n\n        const id = valueFn(scope, locals);\n        const text = displayFn(scope, locals) || '';\n        return { id, text };\n      });\n    }\n\n    return {\n      require: 'ngModel',\n      priority: 10,\n      restrict: 'A',\n      replace: true,\n      link(scope, element, attrs, controller) {\n        const config = {};\n        if (attrs.ngSelect2Options) {\n          config.data = parseOptions(attrs.ngSelect2Options, scope);\n        }\n\n        const select2 = element.select2(config);\n\n        controller.$render = function $renderSelect2() {\n          if (select2.val() !== this.$viewValue) {\n            select2.val(this.$viewValue).trigger('change.select2');\n          }\n        };\n      },\n    };\n  });\n"],"sourceRoot":"/source/"}